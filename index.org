#+TITLE: Notes on Software Development Waste
#+SUBTITLE: Henrique Carvalho Alves <hcarvalhoalves@gmail.com>
#+AUTHOR: Henrique Carvalho Alves <hcarvalhoalves@gmail.com>
#+HTML_HEAD_EXTRA: <style type="text/css"> @media screen { #content { margin: 0 auto; } } @media print { #content { max-width: 100%;} } .figure { max-width: 70%; margin: 0 auto; } </style>
#+STARTUP: inlineimages

* Summary

  _Sedano et al (2017)[1]_ on "Software Development Waste" identified and describe that software projects manifest nine possible types of waste, in terms of loss of productivity and unnecessary friction.

  These are my notes on the paper, where I summarize the waste taxonomy according to the paper and explore possible causal relationships.
  
* Types and causes of waste [2]

| Waste      | *Building the wrong feature or product*                                                                                 | *Mismanaging the backlog*                                                                            | *Rework*                                                                              | *Unnecessarily complex solutions*                                                                                                          | *Extraneous cognitive load*                                          | *Psychological distress*                               | *Waiting/Multitasking*                                | *Knowledge loss*                                              | *Ineffective communication*                                                                                                            |
| Definition | The cost of building a feature or product that does not address user or business needs.                                 | The cost of duplicating work, expediting lower value user features, or delaying necessary bug fixes. | The cost of altering delivered work that should have been done correctly but was not. | The cost of creating a more complicated solution than necessary, a missed opportunity to simplify features, user interface, or code.       | The costs of unneeded expenditure of mental energy.                  | The costs of burdening the team with unhelpful stress. | The cost of idle time, often hidden by multi-tasking. | The cost of re-acquiring information that the team once knew. | The cost of incomplete, incorrect, misleading, inefficient, or absent communication.                                                   |
| Causes     | 1. User desiderata (not doing user research, validation, or testing; ignoring user feedback; working on low user value) | 1. Backlog inversion                                                                                 | 1. Technical debt                                                                     | 1. Unnecessary feature complexity from the userâ€™s perspective                                                                              | 1. Suffering from technical debt                                     | 1. Low team morale                                     | 1. Slow tests or unreliable tests                     | 1. Team churn                                                 | 1. Team size is too large                                                                                                              |
|            | 2. Business desiderata (not involving a business stakeholder; slow stakeholder feedback; unclear product priorities)    | 2. Working on too many features simultaneously                                                       | 2. Rejected stories (e.g. product manager rejects story implementation)               | 2. Unnecessary technical complexity (duplicating code, lack of interaction design reuse, overly complex technical design created up-front) | 2. Complex or large stories                                          | 2. Rush mode                                           | 2. Unreliable acceptance environment                  | 2. Knowledge silos                                            | 2. Asynchronous communication (distributed teams; distributed stakeholders; dependency on another team; opaque processes outside team) |
|            |                                                                                                                         | 3. Duplicated work                                                                                   | 3. No clear definition of done (ambiguous stories; second guessing design mocks)      |                                                                                                                                            | 3. Inefficient tools and problematic APIs, libraries, and frameworks | 3. Interpersonal or team conflict                      | 3. Missing information, people, or equipment          |                                                               | 3. Imbalance (dominating the conversation; not listening)                                                                              |
|            |                                                                                                                         | 4. Not enough ready stories                                                                          | 4. Defects (poor testing strategy; no root-cause analysis on bugs)                    |                                                                                                                                            | 4. Unnecessary context switching                                     |                                                        | 4. Context switching from delayed feedback            |                                                               | 4. Inefficient meetings (lack of focus; skipping retros; not discussing blockers each day; meetings running over (e.g. long stand-ups) |
|            |                                                                                                                         | 5. Imbalance of feature work and bug fixing                                                          |                                                                                       |                                                                                                                                            | 5. Inefficient development flow                                      |                                                        |                                                       |                                                               |                                                                                                                                        |
|            |                                                                                                                         | 6. Delaying testing or critical bug fixing                                                           |                                                                                       |                                                                                                                                            | 6. Poorly organized code                                             |                                                        |                                                       |                                                               |                                                                                                                                        |
|            |                                                                                                                         | 7. Capricious thrashing                                                                              |                                                                                       |                                                                                                                                            |                                                                      |                                                        |                                                       |                                                               |                                                                                                                                        |

* Causal relationships

#+BEGIN_SRC dot :file relationships.svg :exports results
digraph {
  1[label="Building the wrong feature"]
  2[label="Mismanaging the backlog"]
  3[label="Rework"]
  4[label="Unnecessarily complex solutions"]
  5[label="Extraneous cognitive load"]
  6[label="Psychological distress"]
  7[label="Waiting/Multitasking"]
  8[label="Knowledge loss"]
  9[label="Ineffective communication"]

  9 -> 2 [label="lack of alignment"]
  4 -> 5 [label="suffering technical debt\nlack of tools"]
  2 -> 5 [label="complex/large stories"]
  5 -> 6 [label="burnout"]
  6 -> 8 [label="team churn"]
  9 -> 8 [label="knowledge silos"]
  8 -> 9 [label="inexperience"]
  4 -> 7 [label="long iteration time"]
  7 -> 2 [label="excessive work-in-progress\nbacklog inversion\nlack of stories"]
  3 -> 4 [label="accidental complexity"]
  4 -> 3 [label="technical debt\ndefects"]
  5 -> 3 [label="defects"]
  7 -> 5 [label="context switching"]
  5 -> 9 [label="team size\nasync communication"]
  2 -> 3 [label="rejected stories\nbadly defined stories"]
  3 -> 2 [label="duplicated work\nbugfix-to-feature ratio"]
  9 -> 1 [label="missing user needs\nmissing business needs\nlack of involvement"]
  9 -> 6 [label="interpersonal/team conflict"]
  1 -> 4 [label="feature complexity"]
  9 -> 7 [label="missing support"]
}
#+END_SRC

#+RESULTS:
[[file:relationships.svg]]

*  Sources
   
  1. Todd Sedano, Paul Ralph, and Cecile Peraire: "Software Development Waste". 2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE), 10.1109/icse.2017.20.
     https://ieeexplore.ieee.org/document/7985656
     
  2. Greg Wilson: "Software Development Waste". 2021-08-29
     https://neverworkintheory.org/2021/08/29/software-development-waste.html
